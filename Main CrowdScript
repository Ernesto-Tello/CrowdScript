using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System.IO;
using System.Collections.Generic;
using RestSharp.Authenticators;
using RestSharp.Authenticators.OAuth2;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Reflection;
using System.Collections.Generic;
using static System.Collections.Specialized.BitVector32;
using System.Security.Principal;
using System.Resources;
using System.Collections;
using System.Security.Cryptography;
using System.Net.Sockets;
using static System.Net.Mime.MediaTypeNames;
using System.Collections.Immutable;
using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using System.Text.Unicode;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Security.AccessControl;
using System.Runtime.ConstrainedExecution;
using System.Threading;

namespace CrowdStrike_SW_Deployment
{
    class Program
    {
        public static string baseURL = "https://api.crowdstrike.com ";
        public static string wd = new FileInfo(Assembly.GetExecutingAssembly().Location).DirectoryName;
        public static string computersList = wd + "//TXT//ComputersList.txt";
        public static string configFile = wd + "//TXT//ConfigurationFile.txt";
        public static string logFile = wd + "//TXT//log.txt";
        public static string commsErrLog = wd + "//TXT//device_comms_error.txt";
        public static string devCmdUncompleted = wd + "//TXT//device_cmd_uncompleted.txt";
        public static string devNotFound = wd + "//TXT//device_not_found.txt";
        public static string ConfRtrFileName = File.ReadLines(configFile).First().Split(':').LastOrDefault();
        Dictionary<string, string> devIds;

        static void Main(string[] args)
        {
            string baseCmd = File.ReadLines(configFile).Skip(1).Take(1).First().Split(':').LastOrDefault();
            string mainCmd = File.ReadLines(configFile).Skip(2).Take(1).First().Substring(13);
            string baseCmdII = File.ReadLines(configFile).Skip(3).Take(1).First().Split(':').LastOrDefault();
            string mainCmdII = File.ReadLines(configFile).Skip(4).Take(1).First().Substring(26);
            string queueOffline = File.ReadLines(configFile).Skip(5).Take(1).First().Split(':').LastOrDefault();
            string sTime = File.ReadLines(configFile).Skip(6).Take(1).First().Split(':').LastOrDefault();
            int st = Convert.ToInt32(sTime) - 5;
            string rTime = File.ReadLines(configFile).Skip(7).Take(1).First().Split(':').LastOrDefault();
            int rt = Convert.ToInt32(sTime) - 5;
            string secret = File.ReadLines(configFile).Skip(8).Take(1).First().Split(':').LastOrDefault();
            string clientId = File.ReadLines(configFile).Skip(9).Take(1).First().Split(':').LastOrDefault();
            string oauthData = "client_id=" + clientId + "&client_secret=" + secret;
            List<string> dirCommands = new List<string>();
            dirCommands.Add("ls");
            dirCommands.Add("cd");
            dirCommands.Add("cp");
            dirCommands.Add("rm");
            dirCommands.Add("mv");
            dirCommands.Add("get");
            dirCommands.Add("put");
            dirCommands.Add("cat");
            dirCommands.Add("filehash");
            dirCommands.Add("mkdir");
            dirCommands.Add("zip");
            RestClientOptions options = new RestClientOptions(baseURL)
            {
                MaxTimeout = 300000,
            };
            RestClient client = new RestClient(options);
            
            //GET OAUTH TOKEN from API
           string token = GetToken(client, clientId, secret);

            //Get metadata from API for the filename in config txt; based on Only Run Script Parameter
            ////NOT Used////
            string rtrFileId = "";
            if (ConfRtrFileName != "")
            {
                rtrFileId = GetRtrPutFileId(token, client);
            }

            // GET Device IDs from API
            Dictionary<string, string> 
                devIds = GetDeviceIds(token, client);

            // PUT File API Process //
            if (baseCmd == "put")
            {
                string sessionUri = "/real-time-response/entities/sessions/v1?timeout=600";
                string admCommandUri = "/real-time-response/entities/admin-command/v1";
                bool qu = bool.Parse(queueOffline);
                // PUT FILE Single HOST: 
                if (devIds.Count == 1)
                {
                    //Create Single session//
                    string JsonSessBody = "{\"device_id\":\"" + devIds.FirstOrDefault().Value + "\",\"queue_offline\":" + qu.ToString().ToLower() + "}";
                    RestRequest singleSess = new RestRequest(sessionUri, Method.Post);
                    singleSess.AddHeader("accept", "application/json");
                    singleSess.AddHeader("Content-Type", "application/json");
                    singleSess.AddHeader("Authorization", "Bearer " + token);
                    singleSess.AddBody(JsonSessBody);
                    RestResponse sessResp = client.Execute(singleSess);
                    File.AppendAllText(logFile, System.DateTime.Now + " - Post: /real-time-response/entities/sessions \r\n");
                    Console.Write(System.DateTime.Now + " - Post: /real-time-response/entities/sessions \r\n");
                    SesRoot sess = JsonConvert.DeserializeObject<SesRoot>(sessResp.Content);

                    // Log Session Response Data
                    string sessId = sess.resources.FirstOrDefault().session_id;
                    File.AppendAllText(logFile, DateTime.Now + " /real-time-response/entities/sessions: " + sessResp.StatusCode.ToString() + "\r\n");
                    File.AppendAllText(logFile, System.DateTime.Now + " - Session ID: " + sessId + "\r\n");
                    Console.Write(System.DateTime.Now + " /real-time-response/entities/sessions: " + sessResp.StatusCode.ToString() + "\r\n");
                    Console.Write(System.DateTime.Now + " - Session ID: " + sessId + "\r\n");
                    try
                    {
                        if (sess.errors.Count() != null)
                        {
                            string sesserr = sess.errors.FirstOrDefault().code + " - " + sess.errors.FirstOrDefault().message;
                            File.AppendAllText(logFile, DateTime.Now + " Batch ID:" + sessId + " Error:\r\n");
                            File.AppendAllText(logFile, sesserr + "\r\n");
                            Console.WriteLine("Session Error: Session ID = " + sessId + "\r\n" + sesserr + "\r\n");
                        }
                    }
                    catch
                    {
                        File.AppendAllText(logFile, "\r\n no errors in session");
                        Console.WriteLine("\r\n no errors in session" + "\r\n");

                    }
                    var a = sess.resources.FirstOrDefault().pwd;
                    var b = sess.resources.FirstOrDefault().created_at;
                    var c = sess.resources.FirstOrDefault().session_id;
                    File.AppendAllText(logFile, "pwd: " + a + "\r\n");
                    File.AppendAllText(logFile, "created_at: " + b + "\r\n");
                    File.AppendAllText(logFile, "session_id time: " + c + "\r\n");
                    Console.WriteLine("pwd: " + a);
                    Console.WriteLine("created_at: " + b);
                    Console.WriteLine("query session_id: " + c);

                    //Put Files
                    if(mainCmd.Contains(','))
                    {
                        //create individual put commands
                        //usage: Main Command:put Sysmon64.exe, splunkclouduf.spl, somefile.txt
                        var filenames = mainCmd.Split(',');
                        List<string> putcommands = new List<string>();
                        putcommands.Add(filenames[0]);                        
                        for(int i = 1; i < filenames.Count(); i++)
                        {
                            string command = "put" + filenames[i];
                            putcommands.Add(command);
                        }
                        foreach(var pc in putcommands)
                        {
                            //wait 5 sec for next put command
                            if(pc != putcommands.ElementAt(0))
                            {
                                Thread.Sleep(5000);
                            }
                            // Send Put commands
                            string JsonPutBody = "{\"command_string\":\"" + pc + "\",\"session_id\":\"" + c + "\",\"base_command\":\"put\"}";
                            RestRequest admCommandRqst = new RestRequest(admCommandUri, Method.Post);
                            admCommandRqst.AddHeader("accept", "application/json");
                            admCommandRqst.AddHeader("Content-Type", "application/json");
                            admCommandRqst.AddHeader("Authorization", "Bearer " + token);
                            admCommandRqst.AddBody(JsonPutBody);
                            RestResponse commandResp = client.Execute(admCommandRqst);
                            if (commandResp.ResponseStatus == ResponseStatus.Completed)
                            {
                                Console.WriteLine("\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                                File.AppendAllText(logFile, "\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                            }
                            else
                            {
                                Console.WriteLine("\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + commandResp.ResponseStatus.ToString());
                                File.AppendAllText(logFile, "\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                            }
                        }
                    }

                    
                }
                // PUT File Multi-Host//
                if (devIds.Count > 1)
                {
                    foreach ( var devId in devIds)
                    {
                        string JsonSessBody = "{\"device_id\":\"" + devId.Value + "\",\"queue_offline\":" + qu.ToString().ToLower() + "}";
                        RestRequest singleSess = new RestRequest(sessionUri, Method.Post);
                        singleSess.AddHeader("accept", "application/json");
                        singleSess.AddHeader("Content-Type", "application/json");
                        singleSess.AddHeader("Authorization", "Bearer " + token);
                        singleSess.AddBody(JsonSessBody);
                        RestResponse sessResp = client.Execute(singleSess);
                        File.AppendAllText(logFile, System.DateTime.Now + " - Post: /real-time-response/entities/sessions \r\n");
                        Console.Write(System.DateTime.Now + " - Post: /real-time-response/entities/sessions \r\n");
                        SesRoot sess = JsonConvert.DeserializeObject<SesRoot>(sessResp.Content);
                        // Log Session Response Data
                        string sessId = sess.resources.FirstOrDefault().session_id;
                        File.AppendAllText(logFile, DateTime.Now + " /real-time-response/entities/sessions: " + sessResp.StatusCode.ToString() + "\r\n");
                        File.AppendAllText(logFile, System.DateTime.Now + " - Session ID: " + sessId + "\r\n");
                        Console.Write(System.DateTime.Now + " /real-time-response/entities/sessions: " + sessResp.StatusCode.ToString() + "\r\n");
                        Console.Write(System.DateTime.Now + " - Session ID: " + sessId + "\r\n");
                        try
                        {
                            if (sess.errors.Count() != null)
                            {
                                string sesserr = sess.errors.FirstOrDefault().code + " - " + sess.errors.FirstOrDefault().message;
                                File.AppendAllText(logFile, DateTime.Now + " Batch ID:" + sessId + " Error:\r\n");
                                File.AppendAllText(logFile, sesserr + "\r\n");
                                Console.WriteLine("Session Error: Session ID = " + sessId + "\r\n" + sesserr + "\r\n");
                            }
                        }
                        catch
                        {
                            File.AppendAllText(logFile, "\r\n no errors in session");
                            Console.WriteLine("\r\n no errors in session" + "\r\n");

                        }
                        var a = sess.resources.FirstOrDefault().pwd;
                        var b = sess.resources.FirstOrDefault().created_at;
                        var c = sess.resources.FirstOrDefault().session_id;
                        File.AppendAllText(logFile, "pwd: " + a + "\r\n");
                        File.AppendAllText(logFile, "created_at: " + b + "\r\n");
                        File.AppendAllText(logFile, "session_id time: " + c + "\r\n");
                        Console.WriteLine("pwd: " + a);
                        Console.WriteLine("created_at: " + b);
                        Console.WriteLine("query session_id: " + c);

                        //Put Files
                        if (mainCmd.Contains(','))
                        {
                            //create individual put commands
                            //usage: Main Command:put Sysmon64.exe, splunkclouduf.spl, somefile.txt
                            var filenames = mainCmd.Split(',');
                            List<string> putcommands = new List<string>();
                            putcommands.Add(filenames[0]);
                            for (int i = 1; i < filenames.Count(); i++)
                            {
                                string command = "put" + filenames[i];
                                putcommands.Add(command);
                            }
                            foreach (var pc in putcommands)
                            {
                                //wait 5 sec for next put command
                                if (pc != putcommands.ElementAt(0))
                                {
                                    Thread.Sleep(5000);
                                }
                                // Send Put commands
                                string JsonPutBody = "{\"command_string\":\"" + pc + "\",\"session_id\":\"" + c + "\",\"base_command\":\"put\"}";
                                RestRequest admCommandRqst = new RestRequest(admCommandUri, Method.Post);
                                admCommandRqst.AddHeader("accept", "application/json");
                                admCommandRqst.AddHeader("Content-Type", "application/json");
                                admCommandRqst.AddHeader("Authorization", "Bearer " + token);
                                admCommandRqst.AddBody(JsonPutBody);
                                RestResponse commandResp = client.Execute(admCommandRqst);
                                if (commandResp.ResponseStatus == ResponseStatus.Completed)
                                {
                                    Console.WriteLine("\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                                    File.AppendAllText(logFile, "\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                                }
                                else
                                {
                                    Console.WriteLine("\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + commandResp.ResponseStatus.ToString());
                                    File.AppendAllText(logFile, "\r\n" + admCommandUri + "\r\n" + JsonPutBody + "\r\n" + "Response: Completed");
                                }
                            }
                        }
                    }
                }
            }
        
            // Create Batch Body for the POST request to initiate multple sessions
            string JsonbatchBody = CreateBatchBody(devIds);
            File.AppendAllText(logFile, "JsonbatchBody ready for POST \r\n");
            // Initiate a batch session +Timeout duration for how long a host has time to complete processing. +
            string batchSessUri = "/real-time-response/combined/batch-init-session/v1?timeout="+sTime+"&host_timeout_duration="+st.ToString()+"s";
            RestRequest sessionRqst = new RestRequest(batchSessUri, Method.Post);
            sessionRqst.AddHeader("accept", "application/json");
            sessionRqst.AddHeader("Content-Type", "application/json");
            sessionRqst.AddHeader("Authorization", "Bearer " + token);
            sessionRqst.AddBody(JsonbatchBody);
            RestResponse sessionResponse = client.Execute(sessionRqst); 
            File.AppendAllText(logFile, System.DateTime.Now + " - Post: batch-init-session \r\n");
            Console.Write(System.DateTime.Now + " - Post: batch-init-session \r\n");
            SessRoot session = JsonConvert.DeserializeObject<SessRoot>(sessionResponse.Content);
            // Log Session Response Data
            string batchId = session.batch_id;
            File.AppendAllText(logFile, DateTime.Now + " Batch-init-Session Response: " + sessionResponse.StatusCode.ToString() + "\r\n");
            File.AppendAllText(logFile, System.DateTime.Now + " - Batch Session ID: " + batchId + "\r\n");
            Console.Write(System.DateTime.Now + " Batch-init-Session Response: " + sessionResponse.StatusCode.ToString() + "\r\n");
            Console.Write(System.DateTime.Now + " - Batch Session ID: " + batchId + "\r\n");
            if (session.errors.Count() > 0)
            {
                string batchError = session.errors.FirstOrDefault().code + " - " + session.errors.FirstOrDefault().message;
                File.AppendAllText(logFile, DateTime.Now + " Batch ID:" + batchId + " Error:\r\n");
                File.AppendAllText(logFile, batchError + "\r\n");
                Console.WriteLine("Batch Session Error: Session ID = " + batchId + "\r\n"+ batchError + "\r\n");
            }
            foreach(var ss in session.resources.Values) //Logs Communication Errors
            {
                File.AppendAllText(logFile, "Batch Session Resources Message \r\n");
                Console.WriteLine();
                if (ss.errors.Count() > 0)
                {
                    var dev = devIds.Where(x => x.Value == ss.aid).FirstOrDefault();
                    File.AppendAllText(logFile, dev.Key + "\r\n" + ss.errors.FirstOrDefault().message + "\r\n");
                    Console.WriteLine(dev.Key + "\r\n" + ss.errors.FirstOrDefault().message + "\r\n");
                    if(ss.errors.FirstOrDefault().message == "Could not establish sensor comms")
                    {
                        File.AppendAllText(commsErrLog, dev.Key + "\r\n");
                    }
                }
                else
                {
                    var dev = devIds.Where(x => x.Value == ss.aid).FirstOrDefault();
                    var a = ss.stdout;
                    var b = ss.complete.ToString();
                    var c = ss.query_time;
                    File.AppendAllText(logFile, dev.Key + "\r\n");
                    File.AppendAllText(logFile, "stdout: " + a + "\r\n");
                    File.AppendAllText(logFile, "complete: " + b + "\r\n");
                    File.AppendAllText(logFile, "query time: " + c + "\r\n");
                    Console.WriteLine(dev.Key);
                    Console.WriteLine("stdout: " + a);
                    Console.WriteLine("complete: " + b);
                    Console.WriteLine("query time: " + c);
                }
            }

            // Step 2 Send Command
            string JsonbatchCmdBody = "";
            if (dirCommands.Contains(baseCmd))
            {
                // required for any commands taking a directory path; Add 4 backslash to look like C:\\ 
                string formatCmd = mainCmd.Replace("\\","\\\\");
                // required to fix spaces
                string hh = "\\" + "\"";
                string goodCmd = formatCmd.Replace("\"", hh);
                JsonbatchCmdBody = "{\"command_string\":\"" + goodCmd + "\",\"batch_id\":\"" + batchId + "\",\"base_command\":\"" + baseCmd + "\"}";

            }
            else
            { //required for commands using quotation marks; runscript""
                string hh = "\\" + "\"";
                var command = mainCmd.Replace("\"", hh);
                JsonbatchCmdBody = "{\"command_string\":\"" + command + "\",\"batch_id\":\"" + batchId + "\",\"base_command\":\"" + baseCmd + "\"}";
            }

            //string batchSessCmdUri = "https://api.crowdstrike.com/real-time-response/combined/batch-command/v1?timeout=300&host_timeout_duration=295s";
            string batchSessCmdUri = "/real-time-response/combined/batch-active-responder-command/v1?timeout="+rTime+"&host_timeout_duration="+rt.ToString()+"s";
            RestRequest BatchSessCmdRqst = new RestRequest(batchSessCmdUri, Method.Post);
            BatchSessCmdRqst.AddHeader("accept", "application/json");
            BatchSessCmdRqst.AddHeader("Content-Type", "application/json");
            BatchSessCmdRqst.AddHeader("Authorization", "Bearer " + token);
            BatchSessCmdRqst.AddBody(JsonbatchCmdBody);
            RestResponse CmdResponse = client.Execute(BatchSessCmdRqst);
            //Send Rest Response to logging function
            logger(CmdResponse,devIds);

            //Step 3 Send second set of commands
            if ( baseCmdII != "" && mainCmdII != "")
            {
                string JsonbatchCmdBodyII = "";
                if (dirCommands.Contains(baseCmd))
                {
                    // required for any commands taking a directory path; Add 4 backslash to look like C:\\ 
                    string formatCmd = mainCmdII.Replace("\\", "\\\\");
                    // required to fix spaces
                    string hh = "\\" + "\"";
                    string goodCmd = formatCmd.Replace("\"", hh);
                    JsonbatchCmdBodyII = "{\"command_string\":\"" + goodCmd + "\",\"batch_id\":\"" + batchId + "\",\"base_command\":\"" + baseCmdII + "\"}";

                }
                else
                { //required for commands using quotation marks; runscript""
                    string text = mainCmdII;
                    string hh = "\\" + "\"";
                    var command = text.Replace("\"", hh);
                    JsonbatchCmdBodyII = "{\"command_string\":\"" + command + "\",\"batch_id\":\"" + batchId + "\",\"base_command\":\"" + baseCmdII + "\"}";
                }
                RestRequest BatchRqstII = new RestRequest(batchSessCmdUri, Method.Post);
                BatchRqstII.AddHeader("accept", "application/json");
                BatchRqstII.AddHeader("Content-Type", "application/json");
                BatchRqstII.AddHeader("Authorization", "Bearer " + token);
                BatchRqstII.AddBody(JsonbatchCmdBodyII);
                RestResponse CmdResponseII = client.Execute(BatchRqstII);
                //Send Rest Response to logging function
                logger(CmdResponseII, devIds);
            }
            

            revokeToken(token, client, clientId, secret);

        }

        public static void logger (RestResponse CmdResponse, Dictionary<string, string> devIds)
        {
            File.AppendAllText(logFile, System.DateTime.Now + " - Post: batch-active-responder-command \r\n");
            Console.Write(System.DateTime.Now + " - Post: batch-active-responder-command \r\n");
            BatchCMDResponseRoot batCmdResp = JsonConvert.DeserializeObject<BatchCMDResponseRoot>(CmdResponse.Content);
            File.AppendAllText(logFile, System.DateTime.Now + " Batch-Active-Responder-CMD Response: " + CmdResponse.StatusCode.ToString() + "\r\n");
            Console.Write(System.DateTime.Now + " Batch-Active-Responder-CMD Response: " + CmdResponse.StatusCode.ToString() + "\r\n");
            if (batCmdResp.Errors.Count() > 0 )
            {
                try
                {
                    File.AppendAllText(logFile, "\r\n Batch Session Not Created: \r\n" );
                    File.AppendAllText(logFile, batCmdResp.Errors.FirstOrDefault().ToString());
                }
                catch(Exception e)
                {
                    File.AppendAllText(logFile, e.Message);
                }
                
            }
            else
            {
                for(int i = 0; i < batCmdResp.Combined.Resources.Count; i++ )
                {
                    var dev = devIds.Where(x => x.Value == batCmdResp.Combined.Resources.ElementAt(i).Value.aid).FirstOrDefault();
                    File.AppendAllText(logFile, DateTime.Now + " HOST: " + dev + "\r\n");
                    Console.WriteLine(DateTime.Now + " HOST: " + dev);
                    File.AppendAllText(logFile, "Complete: " + batCmdResp.Combined.Resources.ElementAt(i).Value.complete + "\r\n");
                    Console.WriteLine("Complete: " + batCmdResp.Combined.Resources.ElementAt(i).Value.complete);
                    File.AppendAllText(logFile, "StdOut: " + batCmdResp.Combined.Resources.ElementAt(i).Value.stdout + "\r\n");
                    Console.WriteLine("StdOut: " + batCmdResp.Combined.Resources.ElementAt(i).Value.stdout);
                    File.AppendAllText(logFile, "StdErr: " + batCmdResp.Combined.Resources.ElementAt(i).Value.stderr + "\r\n");
                    Console.WriteLine("StdErr: " + batCmdResp.Combined.Resources.ElementAt(i).Value.stderr + "\r\n");
                    if (batCmdResp.Combined.Resources.ElementAt(i).Value.errors.Count() > 0)
                    {
                        File.AppendAllText(logFile, "OtherErr: " + batCmdResp.Combined.Resources.ElementAt(i).Value.errors.FirstOrDefault().message + "\r\n");
                        Console.WriteLine("OtherErr: " + batCmdResp.Combined.Resources.ElementAt(i).Value.errors.FirstOrDefault().message + "\r\n");
                    }
                    if(batCmdResp.Combined.Resources.ElementAt(i).Value.complete == false)
                    {
                        File.AppendAllText(devCmdUncompleted, dev.Key + "\r\n");
                    }
                    
                }
            }
        }
        public static Dictionary<string, string> GetDeviceIds(string Token, RestClient restClient)
        {
            Console.WriteLine("Getting Device IDs from CS");
            var devIds = new Dictionary<string, string>();
            List<string> txtDevices = File.ReadAllLines(computersList).ToList();
            foreach (string txtDevice in txtDevices)
            {
                //filter by platform, serial_number, hostname
                string hostsUri = "/devices/queries/devices/v1?limit=10&filter=hostname:" + "'" + txtDevice + "'";
                RestRequest deviceRequest = new RestRequest(hostsUri, Method.Get);
                deviceRequest.AddHeader("Accept", "application/json");
                deviceRequest.AddHeader("Authorization", "Bearer " + Token);
                RestResponse deviceResponse = restClient.Execute(deviceRequest);
                GetDevices device = JsonConvert.DeserializeObject<GetDevices>(deviceResponse.Content);
                try
                {
                    if (device.resources == null || device.resources.Count == 0)
                    {
                        Console.WriteLine(txtDevice + " - not found");
                        File.AppendAllText(devNotFound, txtDevice + "\r\n");
                    }
                    else
                    {
                        devIds.Add(txtDevice, device.resources.FirstOrDefault());
                        Console.WriteLine(txtDevice + " - " + device.resources.FirstOrDefault());
                    }
                }
                catch (Exception ex) 
                {
                    Console.WriteLine("GetDeviceIDs Error: " + ex.Message);
                    File.AppendAllText(logFile, "GetDeviceIDs Error: " + ex.Message); 
                }
                
            }
            return devIds;
        }
        public static string CreateBatchBody(Dictionary<string, string> devIds)
        {
            string batchBody = "{\"host_ids\":[";
            string batchBodEnd = "]}";

            for (int i = 0; i < devIds.Count(); i++)
            {
                if (i != devIds.Count() - 1)
                {
                    batchBody += "\"" + devIds.ElementAt(i).Value + "\",";
                }
                else if (i == devIds.Count() - 1)
                {
                    batchBody += "\"" + devIds.ElementAt(i).Value + "\"";
                    batchBody += batchBodEnd;
                }

            }
            return batchBody;
        }
        public static string GetToken(RestClient restClient, string clientId, string secret)
        {
            string token = "";
            string oauthData = "client_id=" + clientId + "&client_secret=" + secret;
            RestRequest authRequest = new RestRequest("/oauth2/token", Method.Post);
            authRequest.AddHeader("Accept", "application/json");
            authRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");
            authRequest.AddStringBody(oauthData, ContentType.Plain);
            try
            {
                RestResponse oauthResponse = restClient.Execute(authRequest);
                oauth2Token oauthdData = JsonConvert.DeserializeObject<oauth2Token>(oauthResponse.Content);
                token = oauthdData.access_token;

                if (oauthResponse.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    File.AppendAllText(logFile, DateTime.Now + " OAuth Request Status Code: " + oauthResponse.StatusCode.ToString() + "\r\n");
                    Console.WriteLine(DateTime.Now + " OAuth Request Status Code: " + oauthResponse.StatusCode.ToString());
                }
                else
                {
                    File.AppendAllText(logFile, DateTime.Now + " OAuth Request Status Code: " + oauthResponse.StatusCode.ToString() + "\r\n");
                    Console.WriteLine(DateTime.Now + " OAuth Request Status Code: " + oauthResponse.StatusCode.ToString() + "\r\n");
                    if (oauthResponse.ErrorMessage != null)
                    {
                        File.AppendAllText(logFile, "OAuth Request Error: " + oauthResponse.ErrorMessage + "\r\n");
                        Console.WriteLine("OAuth Request Error: " + oauthResponse.ErrorMessage + "\r\n");
                    }
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText(logFile, DateTime.Now + " OAuth Exception - " + ex.Message + "\r\n");
                Console.WriteLine(DateTime.Now + " OAuth Exception - " + ex.Message + "\r\n");
            }
            return token;
        }
        public static void revokeToken(string Token, RestClient restClient, string clientIdd, string secrett) 
        {
            string clientId = clientIdd;
            string secret = secrett;
            string atobb64auth = Base64Encode(clientId + ":"+ secret);
            RestRequest revokeRequest = new RestRequest("/oauth2/revoke", Method.Post);
            revokeRequest.AddHeader("accept", "application/json");
            revokeRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");
            revokeRequest.AddHeader("Authorization", "basic " + atobb64auth);
            revokeRequest.AddBody("token="+Token); //OK
            RestResponse tokenRevokeResponse = restClient.Execute(revokeRequest);
            if (tokenRevokeResponse.StatusCode == System.Net.HttpStatusCode.OK) 
            {
                Console.WriteLine("Token Revoked Successfully");
            }
            else
            {
                Console.WriteLine("Token was not successfully revoked");
            }


        }
        public static string GetRtrPutFileId(string Token, RestClient restClient)
        {
            string rtrFileId = "";
            string rtrPutFiles = "/real-time-response/entities/put-files/v2";
            RestRequest rtrPutRequest = new RestRequest(rtrPutFiles, Method.Get);
            rtrPutRequest.AddHeader("Accept", "application/json");
            rtrPutRequest.AddHeader("Authorization", "Bearer " + Token);
            try
            {
                RestResponse rtrPutResponse = restClient.Execute(rtrPutRequest);
                RtrPut rtrPutData = JsonConvert.DeserializeObject<RtrPut>(rtrPutResponse.Content);
                if (rtrPutResponse.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    File.AppendAllText(logFile, DateTime.Now + " RTR Put-File Response - " + rtrPutResponse.StatusCode + "\r\n");
                    var rtrFileMatch = rtrPutData.resources.FirstOrDefault(x => x.name == ConfRtrFileName);
                    rtrFileId = rtrFileMatch.id;
                    var rtrFileName = rtrFileMatch.name;
                    File.AppendAllText(logFile, DateTime.Now + " RTR Put-File Name/ID - " + rtrFileName + " " + rtrFileId + "\r\n");
                }
                else
                {
                    File.AppendAllText(logFile, DateTime.Now + " RTR Put-File Response - " + rtrPutResponse.StatusCode + "\r\n");
                }

            }
            catch (Exception ex)
            {
                File.AppendAllText(logFile, DateTime.Now + " RTR Put-File Exception - " + ex.Message + "\r\n");
            }
            return rtrFileId;
        }

        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
        public static string Base64Decode(string base64EncodedData)
        {
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }
    }
    //oauth2 Token Classes
    public class oauth2Token
    {
        public string access_token { get; set; }
        public int expires_in { get; set; }
        public string token_type { get; set; }
    }

    //Revoke Token Classes
    public class revokeTokenRoot
    {
        public List<revokeTokenError> errors { get; set; }
        public revokeTokenMeta meta { get; set; }
    }
    public class revokeTokenError
    {
        public int code { get; set; }
        public string id { get; set; }
        public string message { get; set; }
    }
    public class revokeTokenMeta
    {
        public revokeTokenPagination pagination { get; set; }
        public string powered_by { get; set; }
        public int query_time { get; set; }
        public string trace_id { get; set; }
        public revokeTokenWrites writes { get; set; }
    }

    public class revokeTokenPagination
    {
        public int limit { get; set; }
        public int offset { get; set; }
        public int total { get; set; }
    }
    public class revokeTokenWrites
    {
        public int resources_affected { get; set; }
    }
    //Token class to be used for revoking
    [DataContract]
    public class Token
    {
        [DataMember]
        public string token { get; set; }
    }

    //Get Devices Class
    public class Meta
    {
        public double query_time { get; set; }
        public Pagination pagination { get; set; }
        public string powered_by { get; set; }
        public string trace_id { get; set; }
    }

    public class Pagination
    {
        public int offset { get; set; }
        public int limit { get; set; }
        public int total { get; set; }
    }

    public class GetDevices
    {
        public Meta meta { get; set; }
        public List<string> resources { get; set; }
        public List<object> errors { get; set; }
    }

    // RTR PUT Classes
    public class RtrPutMeta
    {
        public double query_time { get; set; }
        public string powered_by { get; set; }
        public string trace_id { get; set; }
    }

    public class RtrPutResource
    {
        public string id { get; set; }
        public string name { get; set; }
        public string description { get; set; }
        public string file_type { get; set; }
        public List<string> platform { get; set; }
        public int size { get; set; }
        public string created_by { get; set; }
        public string created_by_uuid { get; set; }
        public string created_timestamp { get; set; }
        public string modified_by { get; set; }
        public string modified_timestamp { get; set; }
        public string sha256 { get; set; }
        public string permission_type { get; set; }
        public int run_attempt_count { get; set; }
        public int run_success_count { get; set; }
        public bool share_with_workflow { get; set; }
        public bool workflow_is_disruptive { get; set; }
        public string comments_for_audit_log { get; set; }
    }

    public class RtrPut
    {
        public Meta meta { get; set; }
        public List<RtrPutResource> resources { get; set; }
    }


    // RTR SESION POST
    public class rtrSesionData
    {
        public string device_id { get; set; }
        public string origin { get; set; }
        public string queue_offline { get; set; }
    }


    // BATCH SESSION 
    public class Resource
    {
        public string session_id { get; set; }
        public Guid TaskId { get; set; }
        public bool complete { get; set; }
        public string stdout { get; set; }
        public string stderr { get; set; }
        public string BaseCommand { get; set; }
        public string aid { get; set; }
        public List<SessError> errors { get; set; }
        public string query_time { get; set; }
        public bool offline_queued { get; set; }
    }

    public class SessError
    {
        public int code { get; set; }
        public string message { get; set; }
    }

    public class SessMeta
    {
        public double query_time { get; set; }
        public string powered_by { get; set; }
        public string trace_id { get; set; }
    }

    public class SessRoot
    {
        public Meta meta { get; set; }
        public string batch_id { get; set; }
        public Dictionary<string, Resource> resources { get; set; }
        public List<SessError> errors { get; set; }
    }

    // Batch CMD Response
    public partial class BatchCMDResponseRoot
    {
        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("combined")]
        public Combined Combined { get; set; }

        [JsonProperty("errors")]
        public object[] Errors { get; set; }
    }
    public partial class Combined
    {
        [JsonProperty("resources")]
        public Dictionary<string, Resource> Resources { get; set; }
    }

    //Single Session
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class SesArg
    {
        public int id { get; set; }
        public DateTime created_at { get; set; }
        public DateTime updated_at { get; set; }
        public int script_id { get; set; }
        public string arg_type { get; set; }
        public string data_type { get; set; }
        public bool requires_value { get; set; }
        public string arg_name { get; set; }
        public string description { get; set; }
        public string default_value { get; set; }
        public bool required { get; set; }
        public int sequence { get; set; }
        public object options { get; set; }
        public string encoding { get; set; }
        public string command_level { get; set; }
    }

    public class SesMeta
    {
        public double query_time { get; set; }
        public string powered_by { get; set; }
        public string trace_id { get; set; }
    }

    public class SesResource
    {
        public string session_id { get; set; }
        public List<SesScript> scripts { get; set; }
        public int existing_aid_sessions { get; set; }
        public string created_at { get; set; }
        public string pwd { get; set; }
        public bool offline_queued { get; set; }
    }

    public class SesRoot
    {
        public SesMeta meta { get; set; }
        public List<SesResource> resources { get; set; }
        public List<SessError> errors { get; set; }
    }

    public class SesScript
    {
        public string command { get; set; }
        public string description { get; set; }
        public string examples { get; set; }
        public bool internal_only { get; set; }
        public bool runnable { get; set; }
        public List<SesSubCommand> sub_commands { get; set; }
        public List<SesArg> args { get; set; }
    }

    public class SesSubCommand
    {
        public string command { get; set; }
        public string description { get; set; }
        public string examples { get; set; }
        public bool internal_only { get; set; }
        public bool runnable { get; set; }
        public List<object> sub_commands { get; set; }
        public List<SesArg> args { get; set; }
    }





}
